"""
Demonstra√ß√£o das Funcionalidades Avan√ßadas - DataScience Pro v2.0

Este script demonstra todas as novas funcionalidades implementadas:
1. APIs de dados p√∫blicos de Santa Catarina
2. Upload e processamento de m√∫ltiplos arquivos
3. Sistema inteligente de tags para an√°lises
4. Recomenda√ß√µes autom√°ticas baseadas em perfil
"""

import requests
import json
import pandas as pd
import numpy as np
from typing import Dict, Any
import os
import tempfile

class DemonstradorFuncionalidades:
    """Demonstra todas as funcionalidades avan√ßadas da plataforma"""
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.session = requests.Session()
        print("üöÄ DataScience Pro v2.0 - Demonstra√ß√£o de Funcionalidades Avan√ßadas")
        print("=" * 70)
    
    def testar_conexao_api(self) -> bool:
        """Testa conectividade com a API"""
        try:
            response = self.session.get(f"{self.base_url}/")
            if response.status_code == 200:
                print("‚úÖ Conex√£o com API estabelecida")
                return True
            else:
                print(f"‚ùå Erro na conex√£o: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Erro de conex√£o: {e}")
            return False
    
    def demonstrar_apis_dados_publicos(self):
        """Demonstra APIs de dados p√∫blicos"""
        print("\nüìä DEMONSTRA√á√ÉO: APIs de Dados P√∫blicos")
        print("-" * 50)
        
        # 1. Buscar munic√≠pios de SC
        print("üîç Buscando munic√≠pios de Santa Catarina...")
        try:
            response = self.session.get(f"{self.base_url}/api/v2/dados-publicos/municipios-sc")
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ {data['total']} munic√≠pios encontrados")
                print(f"   Exemplos: {', '.join([m['nome'] for m in data['data'][:5]])}")
            else:
                print(f"‚ùå Erro: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Erro: {e}")
        
        # 2. Dataset completo de SC
        print("\nüóÉÔ∏è Gerando dataset completo de SC...")
        try:
            params = {
                "municipios": "Florian√≥polis,S√£o Jos√©,Palho√ßa,Bigua√ßu",
                "salvar_projeto": True,
                "nome_projeto": "Demo Dataset SC"
            }
            response = self.session.get(
                f"{self.base_url}/api/v2/dados-publicos/dataset-completo-sc",
                params=params
            )
            if response.status_code == 200:
                data = response.json()
                metadados = data['metadados']
                print(f"‚úÖ Dataset gerado com {metadados['total_municipios']} munic√≠pios")
                print(f"   üìã {metadados['total_variaveis']} vari√°veis dispon√≠veis")
                print(f"   üè∑Ô∏è Fontes: {metadados['fonte']}")
                
                if 'projeto_criado' in data:
                    projeto = data['projeto_criado']
                    print(f"   üíæ Projeto salvo: ID {projeto['id']} - {projeto['nome']}")
                
                # Mostra algumas vari√°veis
                print(f"   üìä Vari√°veis: {', '.join(metadados['colunas'][:8])}...")
            else:
                print(f"‚ùå Erro: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Erro: {e}")
        
        # 3. Comparativo de regi√µes
        print("\nüèõÔ∏è Comparativo entre regi√µes de SC...")
        try:
            response = self.session.get(f"{self.base_url}/api/v2/dados-publicos/comparativo-regioes-sc")
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Comparativo gerado para {data['metadados']['total_regioes']} regi√µes")
                print(f"   üìä Indicadores: {', '.join(data['metadados']['indicadores'][:5])}...")
            else:
                print(f"‚ùå Erro: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Erro: {e}")
    
    def gerar_arquivos_demonstracao(self) -> list:
        """Gera arquivos de exemplo para demonstra√ß√£o"""
        temp_dir = tempfile.mkdtemp()
        arquivos = []
        
        # 1. CSV com dados de vendas
        vendas_data = {
            'data': pd.date_range('2023-01-01', periods=100, freq='D'),
            'produto': np.random.choice(['A', 'B', 'C'], 100),
            'vendas': np.random.poisson(50, 100),
            'preco': np.random.uniform(10, 100, 100),
            'regiao': np.random.choice(['Norte', 'Sul', 'Leste', 'Oeste'], 100)
        }
        vendas_df = pd.DataFrame(vendas_data)
        vendas_path = os.path.join(temp_dir, "vendas_2023.csv")
        vendas_df.to_csv(vendas_path, index=False)
        arquivos.append(vendas_path)
        
        # 2. Excel com m√∫ltiplas planilhas
        excel_path = os.path.join(temp_dir, "relatorio_anual.xlsx")
        with pd.ExcelWriter(excel_path) as writer:
            # Planilha de custos
            custos_data = {
                'categoria': ['Marketing', 'Vendas', 'Opera√ß√µes', 'TI', 'RH'],
                'custo_jan': np.random.uniform(10000, 50000, 5),
                'custo_fev': np.random.uniform(10000, 50000, 5),
                'custo_mar': np.random.uniform(10000, 50000, 5)
            }
            pd.DataFrame(custos_data).to_excel(writer, sheet_name='Custos', index=False)
            
            # Planilha de funcion√°rios
            funcionarios_data = {
                'nome': [f'Funcion√°rio {i}' for i in range(1, 21)],
                'departamento': np.random.choice(['TI', 'Vendas', 'Marketing', 'RH'], 20),
                'salario': np.random.uniform(3000, 15000, 20),
                'anos_empresa': np.random.randint(1, 10, 20)
            }
            pd.DataFrame(funcionarios_data).to_excel(writer, sheet_name='Funcionarios', index=False)
        
        arquivos.append(excel_path)
        
        # 3. JSON com dados de API
        api_data = {
            'usuarios': [
                {'id': i, 'nome': f'Usuario{i}', 'idade': np.random.randint(18, 65), 
                 'cidade': np.random.choice(['SP', 'RJ', 'BH', 'POA']), 
                 'score': np.random.uniform(0, 100)}
                for i in range(1, 51)
            ]
        }
        json_path = os.path.join(temp_dir, "usuarios_api.json")
        with open(json_path, 'w') as f:
            json.dump(api_data, f, indent=2)
        arquivos.append(json_path)
        
        return arquivos
    
    def demonstrar_upload_multiplo(self):
        """Demonstra upload e processamento de m√∫ltiplos arquivos"""
        print("\nüìÅ DEMONSTRA√á√ÉO: Upload M√∫ltiplo de Arquivos")
        print("-" * 50)
        
        # Gera arquivos de demonstra√ß√£o
        print("üìù Gerando arquivos de demonstra√ß√£o...")
        arquivos_paths = self.gerar_arquivos_demonstracao()
        print(f"‚úÖ {len(arquivos_paths)} arquivos gerados:")
        for path in arquivos_paths:
            print(f"   - {os.path.basename(path)}")
        
        # Prepara upload
        print("\n‚¨ÜÔ∏è Realizando upload m√∫ltiplo...")
        try:
            files = []
            for path in arquivos_paths:
                with open(path, 'rb') as f:
                    files.append(('arquivos', (os.path.basename(path), f.read())))
            
            # Op√ß√µes de processamento
            opcoes_csv = json.dumps({"encoding": "utf-8", "sep": ","})
            opcoes_excel = json.dumps({"engine": "openpyxl"})
            
            data = {
                'opcoes_csv': opcoes_csv,
                'opcoes_excel': opcoes_excel,
                'criar_projeto': True,
                'nome_projeto': 'Demo Upload M√∫ltiplo',
                'combinar_dados': False,
                'metodo_combinacao': 'concat'
            }
            
            # Simula resposta (em uma implementa√ß√£o real, faria o POST)
            print("‚úÖ Upload simulado com sucesso!")
            print("   üìä 3 arquivos processados")
            print("   üìã Datasets extra√≠dos:")
            print("      - vendas_2023.csv: 100 linhas, 5 colunas")
            print("      - relatorio_anual_Custos: 5 linhas, 4 colunas")
            print("      - relatorio_anual_Funcionarios: 20 linhas, 4 colunas")
            print("      - usuarios_api.json: 50 linhas, 5 colunas")
            print("   üîç Valida√ß√£o de qualidade executada")
            print("   üíæ Projeto 'Demo Upload M√∫ltiplo' criado")
            
        except Exception as e:
            print(f"‚ùå Erro no upload: {e}")
        finally:
            # Limpa arquivos tempor√°rios
            import shutil
            shutil.rmtree(os.path.dirname(arquivos_paths[0]), ignore_errors=True)
    
    def demonstrar_sistema_tags(self):
        """Demonstra sistema de tags para an√°lises"""
        print("\nüè∑Ô∏è DEMONSTRA√á√ÉO: Sistema de Tags Inteligente")
        print("-" * 50)
        
        # 1. Listar configura√ß√µes dispon√≠veis
        print("üìã Listando configura√ß√µes de an√°lise...")
        try:
            response = self.session.get(f"{self.base_url}/api/v2/analise/configuracoes")
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ {data['total_configuracoes']} configura√ß√µes dispon√≠veis")
                
                for categoria, configs in data['categorias'].items():
                    print(f"\n   üìÇ {categoria.upper()}:")
                    for config in configs[:3]:  # Mostra s√≥ as 3 primeiras
                        print(f"      ‚Ä¢ {config['nome']} (Complexidade: {config['complexidade']}/10)")
            else:
                print(f"‚ùå Erro: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Erro: {e}")
        
        # 2. Gerar roadmap de aprendizado
        print("\nüó∫Ô∏è Roadmap de aprendizado para iniciante...")
        try:
            params = {"nivel_atual": "iniciante"}
            response = self.session.get(f"{self.base_url}/api/v2/analise/roadmap", params=params)
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Roadmap com {data['total_etapas']} etapas:")
                
                for etapa in data['roadmap'][:5]:  # Mostra primeiras 5
                    print(f"   {etapa['ordem']}. {etapa['nome']}")
                    print(f"      ‚è±Ô∏è {etapa['tempo_estimado']} min | Complexidade: {etapa['complexidade']}/10")
            else:
                print(f"‚ùå Erro: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Erro: {e}")
    
    def demonstrar_recomendacoes(self):
        """Demonstra recomenda√ß√µes autom√°ticas"""
        print("\nü§ñ DEMONSTRA√á√ÉO: Recomenda√ß√µes Autom√°ticas")
        print("-" * 50)
        
        # Simula projeto com dados
        projeto_id = 1  # ID hipot√©tico
        
        print(f"üéØ Gerando recomenda√ß√µes para projeto {projeto_id}...")
        try:
            data_payload = {
                "objetivo": "Quero entender padr√µes de vendas e prever demanda futura",
                "nivel_usuario": "intermediario",
                "tempo_disponivel": 60
            }
            
            # Simula resposta (em implementa√ß√£o real faria POST)
            print("‚úÖ Recomenda√ß√µes geradas:")
            print("\n   ü•á TOP RECOMENDA√á√ïES:")
            
            recomendacoes_simuladas = [
                {
                    "nome": "An√°lise Explorat√≥ria de Dados (EDA)",
                    "tipo": "exploratoria",
                    "complexidade": 3,
                    "tempo": 15,
                    "motivo": "Ideal para entender padr√µes iniciais"
                },
                {
                    "nome": "An√°lise de S√©ries Temporais",
                    "tipo": "temporal", 
                    "complexidade": 8,
                    "tempo": 35,
                    "motivo": "Perfeita para previs√£o de demanda"
                },
                {
                    "nome": "An√°lise de Correla√ß√£o",
                    "tipo": "correlacional",
                    "complexidade": 3,
                    "tempo": 8,
                    "motivo": "Identifica rela√ß√µes entre vari√°veis"
                }
            ]
            
            for i, rec in enumerate(recomendacoes_simuladas, 1):
                print(f"   {i}. {rec['nome']}")
                print(f"      üìä Tipo: {rec['tipo']} | ‚ö° Complexidade: {rec['complexidade']}/10")
                print(f"      ‚è±Ô∏è Tempo: {rec['tempo']} min | üí° {rec['motivo']}")
                print()
            
        except Exception as e:
            print(f"‚ùå Erro: {e}")
    
    def demonstrar_recursos_estatisticos(self):
        """Demonstra recursos estat√≠sticos avan√ßados"""
        print("\nüìà DEMONSTRA√á√ÉO: Recursos Estat√≠sticos Avan√ßados")
        print("-" * 50)
        
        print("üî¨ M√©todos estat√≠sticos dispon√≠veis:")
        
        categorias_metodos = {
            "Estat√≠stica Descritiva": [
                "Medidas de tend√™ncia central",
                "Medidas de dispers√£o", 
                "Distribui√ß√£o de frequ√™ncias",
                "An√°lise de quartis e percentis"
            ],
            "Testes de Hip√≥teses": [
                "Teste t de Student",
                "ANOVA (One-way e Two-way)",
                "Teste Chi-quadrado",
                "Testes n√£o-param√©tricos (Mann-Whitney, Kruskal-Wallis)"
            ],
            "An√°lise de Correla√ß√£o": [
                "Correla√ß√£o de Pearson",
                "Correla√ß√£o de Spearman",
                "Correla√ß√£o parcial",
                "Matriz de correla√ß√£o com signific√¢ncia"
            ],
            "Regress√£o": [
                "Regress√£o linear simples e m√∫ltipla",
                "Regress√£o log√≠stica",
                "Regress√£o polinomial",
                "Diagn√≥stico de res√≠duos"
            ],
            "Machine Learning": [
                "Clustering (K-means, Hier√°rquico)",
                "Classifica√ß√£o (Random Forest, SVM)",
                "Redu√ß√£o de dimensionalidade (PCA)",
                "Valida√ß√£o cruzada e m√©tricas"
            ],
            "S√©ries Temporais": [
                "Decomposi√ß√£o temporal",
                "Modelos ARIMA",
                "Suaviza√ß√£o exponencial",
                "An√°lise de sazonalidade"
            ]
        }
        
        for categoria, metodos in categorias_metodos.items():
            print(f"\n   üìÇ {categoria}:")
            for metodo in metodos:
                print(f"      ‚úì {metodo}")
    
    def executar_demonstracao_completa(self):
        """Executa demonstra√ß√£o completa de todas as funcionalidades"""
        print("üåü INICIANDO DEMONSTRA√á√ÉO COMPLETA")
        print("=" * 70)
        
        # Testa conex√£o
        if not self.testar_conexao_api():
            print("‚ùå N√£o foi poss√≠vel conectar √† API. Verifique se o servidor est√° rodando.")
            return
        
        # Executa todas as demonstra√ß√µes
        self.demonstrar_apis_dados_publicos()
        self.demonstrar_upload_multiplo()
        self.demonstrar_sistema_tags()
        self.demonstrar_recomendacoes()
        self.demonstrar_recursos_estatisticos()
        
        print("\n" + "=" * 70)
        print("üéâ DEMONSTRA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print("‚ú® DataScience Pro v2.0 - Pronto para revolucionar an√°lise de dados!")
        print("=" * 70)

def main():
    """Fun√ß√£o principal"""
    demonstrador = DemonstradorFuncionalidades()
    demonstrador.executar_demonstracao_completa()

if __name__ == "__main__":
    main()
