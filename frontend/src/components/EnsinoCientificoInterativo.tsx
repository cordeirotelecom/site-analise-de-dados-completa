import { useState, useEffect } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Grid,
  Button,
  Alert,
  Stepper,
  Step,
  StepLabel,
  StepContent,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Chip,
  Paper,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  LinearProgress,
  Tab,
  Tabs,
  IconButton,
  Tooltip,
  Badge,
  Zoom,
  Fade
} from '@mui/material';
import {
  School,
  MenuBook,
  Quiz,
  Science,
  EmojiObjects,
  TrendingUp,
  Assessment,
  Timeline,
  Functions,
  Calculate,
  BarChart,
  ShowChart,
  Analytics,
  PlayArrow,
  Pause,
  Refresh,
  CheckCircle,
  Cancel,
  Info,
  Warning,
  Star,
  ExpandMore,
  Lightbulb,
  Psychology,
  AutoAwesome,
  Speed,
  Memory,
  DataObject,
  Group,
  Category,
  Rule,
  Transform,
  FilterAlt,
  Tune,
  Settings,
  Visibility,
  Download,
  Share,
  Bookmark,
  ThumbUp,
  Comment,
  Flag
} from '@mui/icons-material';

interface LessonStep {
  id: string;
  title: string;
  type: 'theory' | 'example' | 'practice' | 'quiz' | 'reflection';
  content: string;
  fabioQuote?: string;
  scientificBasis?: string;
  practicalExample?: string;
  excelFormulas?: string[];
  interactiveDemo?: any;
  quiz?: {
    question: string;
    options: string[];
    correct: number;
    explanation: string;
  };
}

interface LearningModule {
  id: string;
  title: string;
  description: string;
  difficulty: 'beginner' | 'intermediate' | 'advanced' | 'expert';
  duration: string;
  prerequisites: string[];
  objectives: string[];
  steps: LessonStep[];
  fabioInsights: string[];
  scientificReferences: string[];
  practicalCases: string[];
}

const EnsinerCientificoInterativo: React.FC = () => {
  const [selectedModule, setSelectedModule] = useState<string>('');
  const [currentStep, setCurrentStep] = useState(0);
  const [completedSteps, setCompletedSteps] = useState<Set<string>>(new Set());
  const [quizAnswers, setQuizAnswers] = useState<{ [key: string]: number }>({});
  const [showExplanation, setShowExplanation] = useState(false);
  const [selectedTab, setSelectedTab] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);
  const [progress, setProgress] = useState(0);
  const [showPracticeData, setShowPracticeData] = useState(false);

  const learningModules: LearningModule[] = [
    {
      id: 'data_collection',
      title: '1. A Import√¢ncia da Coleta de Dados',
      description: 'Fundamentos da coleta cient√≠fica de dados e sua import√¢ncia para an√°lises significativas',
      difficulty: 'beginner',
      duration: '45 min',
      prerequisites: [],
      objectives: [
        'Compreender a import√¢ncia estrat√©gica da coleta de dados',
        'Identificar diferentes tipos de bancos de dados',
        'Aplicar metodologia cient√≠fica na coleta',
        'Reconhecer padr√µes nos dados coletados'
      ],
      steps: [
        {
          id: 'theory_importance',
          title: 'A Chave do Sucesso',
          type: 'theory',
          content: 'A coleta de dados √© o ponto de partida para qualquer an√°lise significativa. Sem dados de qualidade, n√£o h√° ci√™ncia v√°lida.',
          fabioQuote: 'Voc√™ tem que pegar o dado, entendeu? Porque o dado te conta alguma hist√≥ria, n√©? O dado vai te contar alguma hist√≥ria. O resto √© muita teoria, n√©? Muita teoria que eu desconfio. Agora o dado n√£o, n√©? O dado est√° nos contando uma hist√≥ria.',
          scientificBasis: 'A coleta sistem√°tica de dados √© fundamental para o m√©todo cient√≠fico desde Francis Bacon (1620). Dados s√£o a base emp√≠rica que sustenta ou refuta hip√≥teses.',
          practicalExample: 'Durante seu doutorado, F√°bio teve que buscar dados em diversas institui√ß√µes, pois "nenhum desses institutos foram l√° em Copacabana, bateram na minha porta."'
        },
        {
          id: 'types_databases',
          title: 'Tipos de Bancos de Dados',
          type: 'example',
          content: 'Existem diferentes tipos de bancos de dados, cada um com caracter√≠sticas espec√≠ficas para an√°lise.',
          practicalExample: `
            üïê TEMPORAIS: Dados organizados cronologicamente
            ‚Ä¢ Exemplo: Medi√ß√µes de temperatura e umidade em intervalos regulares
            ‚Ä¢ Os casos s√£o cada hor√°rio de medi√ß√£o
            ‚Ä¢ As vari√°veis s√£o valores num√©ricos

            üó∫Ô∏è ESPACIAIS: Dados associados a unidades geogr√°ficas
            ‚Ä¢ Exemplo: Casos de dengue por cidade/regi√£o
            ‚Ä¢ Permitem gera√ß√£o de mapas
            ‚Ä¢ "Os casos ou registros continuam sendo na horizontal. Por√©m, agora vejam que os meus casos s√£o unidades geogr√°ficas."

            üí≥ TRANSACIONAIS: Registram transa√ß√µes individuais
            ‚Ä¢ Exemplo: "O cliente n√∫mero um foi l√° no supermercado e comprou ketchup... O cliente n√∫mero dois comprou n√£o sei o qu√™ de cebola, suga, etc."
            ‚Ä¢ Tempo n√£o √© necessariamente o fator organizador principal

            üè• PACIENTES: Dados que caracterizam indiv√≠duos
            ‚Ä¢ Exemplo: Informa√ß√µes de diagn√≥stico, idade, febre, peso
            ‚Ä¢ Cada linha representa um paciente/caso
          `
        },
        {
          id: 'practice_identification',
          title: 'Pr√°tica: Identificando Tipos de Dados',
          type: 'practice',
          content: 'Vamos praticar identificando tipos de vari√°veis em datasets reais.',
          interactiveDemo: {
            datasets: [
              { name: 'Temperatura', values: [25.5, 30.2, 18.7], type: 'numeric' },
              { name: 'Regi√£o', values: ['Norte', 'Sul', 'Centro'], type: 'categorical' },
              { name: 'Data', values: ['2023-01-01', '2023-01-02'], type: 'temporal' }
            ]
          }
        },
        {
          id: 'quiz_data_types',
          title: 'Quiz: Tipos de Vari√°veis',
          type: 'quiz',
          content: 'Teste seu conhecimento sobre tipos de vari√°veis.',
          quiz: {
            question: 'Segundo F√°bio, qual √© a diferen√ßa fundamental entre vari√°veis num√©ricas e categ√≥ricas?',
            options: [
              'Num√©ricas s√£o sempre maiores que categ√≥ricas',
              'Num√©ricas representam quantidades, categ√≥ricas representam qualidades',
              'N√£o h√° diferen√ßa significativa',
              'Categ√≥ricas s√£o mais importantes para an√°lise'
            ],
            correct: 1,
            explanation: 'Vari√°veis num√©ricas representam quantidades e s√£o utilizadas para c√°lculos matem√°ticos (temperatura, umidade), enquanto categ√≥ricas representam qualidades ("nublado", "ensolarado"). Por√©m, categ√≥ricas podem "embutir nela um n√∫mero" ao serem transformadas em intervalos.'
          }
        }
      ],
      fabioInsights: [
        'O dado n√£o mente - "O dado est√° nos contando uma hist√≥ria"',
        'Colete o m√°ximo de dados poss√≠vel, mesmo que a utilidade n√£o seja aparente imediatamente',
        'Vari√°veis categ√≥ricas podem embutir n√∫meros quando transformadas em intervalos',
        'A coleta ativa √© necess√°ria - os dados n√£o v√™m at√© voc√™'
      ],
      scientificReferences: [
        'Bacon, F. (1620). Novum Organum - Fundamentos do m√©todo emp√≠rico',
        'Tukey, J. (1977). Exploratory Data Analysis - An√°lise explorat√≥ria de dados',
        'Hand, D. (2008). Statistics: A Very Short Introduction - Import√¢ncia dos dados na ci√™ncia'
      ],
      practicalCases: [
        'Doutorado de F√°bio: Preenchimento de dados de pluvi√¥metros usando redes neurais',
        'Estudo dengue Maring√°/Foz: Associa√ß√£o entre chuva acumulada e casos de dengue',
        'COVID-19 Bruxelas/S√£o Paulo: Correla√ß√£o entre secura do ar e mortalidade'
      ]
    },
    {
      id: 'data_preparation',
      title: '2. Prepara√ß√£o de Dados no Excel',
      description: 'T√©cnicas avan√ßadas de prepara√ß√£o e limpeza de dados usando Excel com metodologia cient√≠fica',
      difficulty: 'intermediate',
      duration: '60 min',
      prerequisites: ['data_collection'],
      objectives: [
        'Dominar t√©cnicas de limpeza de dados no Excel',
        'Aplicar discretiza√ß√£o cient√≠fica de vari√°veis',
        'Criar novas vari√°veis a partir das existentes',
        'Preparar dados para an√°lise CBA'
      ],
      steps: [
        {
          id: 'data_cleaning',
          title: 'Tratamento Inicial dos Dados',
          type: 'theory',
          content: 'A prepara√ß√£o adequada dos dados √© cr√≠tica para an√°lises de qualidade.',
          fabioQuote: 'N√£o usem isso. Esse aqui √© um exemplo que eu n√£o usaria. C√©lula mesclada... s√≥ vai te trazer dor de cabe√ßa no futuro.',
          excelFormulas: [
            'Evitar c√©lulas mescladas',
            'Padronizar formatos (v√≠rgula vs. ponto para decimais)',
            'Organizar linhas para c√°lculos no in√≠cio da planilha'
          ],
          practicalExample: 'Corrigir inconsist√™ncias: "Vem na coluna O... ela t√° abichada, por que que ela t√° abichada? Ponto. Porque ela t√° com ponto, √≥, e os outros est√£o v√≠rgula."'
        },
        {
          id: 'discretization_theory',
          title: 'Discretiza√ß√£o de Vari√°veis Num√©ricas',
          type: 'theory',
          content: 'A discretiza√ß√£o transforma vari√°veis num√©ricas em categorias, tornando-as adequadas para modelos de regras.',
          excelFormulas: [
            'M√≠nimo: =M√çNIMO(B21:B118)',
            'Primeiro tercil: =PERCENTIL(B21:B118;1/3)',
            'Segundo tercil: =PERCENTIL(B21:B118;2/3)',
            'M√°ximo: =M√ÅXIMO(B21:B118)'
          ],
          scientificBasis: 'Divis√£o em tercis (33% cada) garante distribui√ß√£o balanceada para an√°lise estat√≠stica.'
        },
        {
          id: 'rounding_practice',
          title: 'Arredondamento Cient√≠fico',
          type: 'practice',
          content: 'Pr√°tica de arredondamento para facilitar comunica√ß√£o dos resultados.',
          fabioQuote: 'Se eu venho em seis dias mais que 92.6 mm. N√∫mero quebrado aqui o cara n√£o vai nem memorizar. Eu vou falar 90.',
          practicalExample: 'Regra: "todas as tr√™s classes apresentarem mais de 20%" ap√≥s o arredondamento.'
        },
        {
          id: 'frequency_calculation',
          title: 'C√°lculo de Frequ√™ncia e Percentual',
          type: 'example',
          content: 'Verifica√ß√£o da distribui√ß√£o dos dados nos novos intervalos.',
          excelFormulas: [
            'Frequ√™ncia: =FREQ√ú√äNCIA(B21:B118;B6:B8)',
            'Percentual: =B10/B$13*100 (onde B13 √© fixado com $)'
          ]
        },
        {
          id: 'categorical_transformation',
          title: 'Transforma√ß√£o Categ√≥rica Avan√ßada',
          type: 'example',
          content: 'Convers√£o de valores num√©ricos em categorias usando fun√ß√µes Excel complexas.',
          excelFormulas: [
            '=SE(√âC√âL.VAZIA(B21);"";SE(B21>B$7;CONCATENAR(V$20;"_>_";V$7);SE(B21>B$6;CONCATENAR(V$6;"_<_";V$20;"_<_";V$7);CONCATENAR(V$20;"_<_";V$6))))',
            '√â.C√âL.VAZIA: Verifica se a c√©lula est√° vazia',
            'SE: Permite criar condi√ß√µes l√≥gicas',
            'CONCATENAR: Combina textos para formar descri√ß√£o categ√≥rica'
          ]
        }
      ],
      fabioInsights: [
        'C√©lulas mescladas trazem dor de cabe√ßa - sempre evitar',
        'N√∫meros quebrados s√£o dif√≠ceis de memorizar - arredondar para comunica√ß√£o',
        'Todas as classes devem ter mais de 20% para an√°lise v√°lida',
        'Verificar sempre se formata√ß√£o est√° consistente (v√≠rgula vs. ponto)'
      ],
      scientificReferences: [
        'Dougherty, J. (1995). Supervised and Unsupervised Discretization of Continuous Features',
        'Fayyad, U. (1993). Multi-Interval Discretization of Continuous-Valued Attributes',
        'Liu, H. (2002). Discretization: An Enabling Technique - Data Mining and Knowledge Discovery'
      ],
      practicalCases: [
        'Discretiza√ß√£o PM2.5 em intervalos para an√°lise de polui√ß√£o',
        'Transforma√ß√£o de estiagem em dias com chuva',
        'Cria√ß√£o de vari√°veis complementares (secura = 100 - umidade)'
      ]
    },
    {
      id: 'exploratory_analysis',
      title: '3. An√°lise Explorat√≥ria e Modelagem',
      description: 'T√©cnicas avan√ßadas de minera√ß√£o de dados para insights qualitativos e quantitativos',
      difficulty: 'advanced',
      duration: '90 min',
      prerequisites: ['data_collection', 'data_preparation'],
      objectives: [
        'Dominar an√°lise de correla√ß√£o linear',
        'Aplicar t√©cnicas de clustering (dendrograma e K-means)',
        'Realizar an√°lise fatorial para redu√ß√£o dimensional',
        'Interpretar resultados com base cient√≠fica'
      ],
      steps: [
        {
          id: 'correlation_analysis',
          title: 'An√°lise Linear (Correla√ß√£o)',
          type: 'theory',
          content: 'Medi√ß√£o da rela√ß√£o linear entre duas vari√°veis usando correla√ß√£o de Pearson.',
          scientificBasis: 'A diagonal da matriz sempre ser√° 1 (vari√°vel correlacionada consigo mesma). Valores pr√≥ximos de 1 ou -1 indicam forte correla√ß√£o.',
          practicalExample: 'Exemplo: correla√ß√£o de 0.98 entre estiagem agr√≠cola e mortes por COVID-19.',
          excelFormulas: [
            'Statistics > Basic Statistics/Tables > Correlation Matrix',
            'Gr√°ficos de dispers√£o: Graphs > Scatterplots',
            'R¬≤ (coeficiente de determina√ß√£o) para ajuste do modelo'
          ]
        },
        {
          id: 'cluster_theory',
          title: 'An√°lise de Cluster - Fundamentos',
          type: 'theory',
          content: 'Identifica√ß√£o de grupos de objetos altamente similares entre si e distintos de outros grupos.',
          scientificBasis: 'Algoritmos baseados em dist√¢ncia matem√°tica para construir hierarquias ou parti√ß√µes.',
          practicalExample: 'Exemplo de F√°bio: "morbidade e press√£o atmosf√©rica tendem a estar no mesmo galho" do dendrograma.'
        },
        {
          id: 'dendrogram_practice',
          title: 'Dendrograma (Joining Tree Cluster)',
          type: 'example',
          content: 'Constru√ß√£o de √°rvore hier√°rquica mostrando dist√¢ncias entre objetos.',
          fabioQuote: 'Ele constr√≥i essa √°rvore de acordo com uma dist√¢ncia matem√°tica.',
          excelFormulas: [
            'Statistics > Multivariate Exploratory Techniques > Cluster Analysis > Joining (Tree) Cluster',
            'Interpreta√ß√£o: "galhos" indicam agrupamentos naturais',
            'Exemplo: morbidade e press√£o atmosf√©rica no mesmo galho'
          ]
        },
        {
          id: 'kmeans_practice',
          title: 'K-Means Cluster',
          type: 'practice',
          content: 'Agrupamento em n√∫mero predefinido de clusters com valida√ß√£o.',
          scientificBasis: 'Maximiza similaridade dentro dos clusters e dissimilaridade entre eles.',
          excelFormulas: [
            'Statistics > Multivariate Exploratory Techniques > K-Means Cluster',
            'K determinado pela an√°lise do dendrograma',
            'Valida√ß√£o por silhueta ou elbow method'
          ]
        },
        {
          id: 'factor_analysis',
          title: 'An√°lise Fatorial',
          type: 'theory',
          content: 'Redu√ß√£o de dimensionalidade e identifica√ß√£o de fatores latentes.',
          scientificBasis: 'Cria "eixos" (fatores) e calcula coordenadas das vari√°veis nesses eixos.',
          fabioQuote: 'Essas caixinhas a gente cria para tentar juntar o m√°ximo de vari√°veis poss√≠veis.',
          excelFormulas: [
            'Statistics > Multivariate Exploratory Techniques > Factor Analysis',
            'Summary Factor Loadings destaca vari√°veis mais associadas',
            'Plots of Loadings (2D, 3D) para visualiza√ß√£o'
          ]
        },
        {
          id: 'quiz_advanced',
          title: 'Quiz: An√°lises Multivariadas',
          type: 'quiz',
          content: 'Teste seu conhecimento sobre t√©cnicas avan√ßadas.',
          quiz: {
            question: 'Qual √© a principal diferen√ßa entre dendrograma e K-means segundo a metodologia apresentada?',
            options: [
              'Dendrograma √© mais r√°pido que K-means',
              'Dendrograma constr√≥i hierarquia, K-means requer K predefinido',
              'K-means √© sempre melhor que dendrograma',
              'N√£o h√° diferen√ßa significativa'
            ],
            correct: 1,
            explanation: 'Dendrograma constr√≥i uma √°rvore hier√°rquica baseada em dist√¢ncia matem√°tica, mostrando agrupamentos naturais. K-means requer que o n√∫mero de clusters (K) seja especificado antecipadamente, frequentemente determinado pela an√°lise do dendrograma.'
          }
        }
      ],
      fabioInsights: [
        'Dendrograma constr√≥i √°rvore por dist√¢ncia matem√°tica - galhos mostram grupos naturais',
        'K-means precisa de K predefinido - use dendrograma para escolher',
        'An√°lise fatorial cria "caixinhas" para juntar m√°ximo de vari√°veis',
        'Factor loadings em vermelho/negrito s√£o mais importantes'
      ],
      scientificReferences: [
        'Ward, J.H. (1963). Hierarchical Grouping to Optimize an Objective Function',
        'MacQueen, J. (1967). Some Methods for Classification and Analysis of Multivariate Observations',
        'Kaiser, H.F. (1958). The Varimax Criterion for Analytic Rotation in Factor Analysis'
      ],
      practicalCases: [
        'Curitiba: Morbidade respirat√≥ria associada com press√£o atmosf√©rica',
        'Maring√°/Foz: Dengue e chuva acumulada via PCA e K-means',
        'Rio de Janeiro: Agrupamento de pluvi√¥metros por similaridade espacial'
      ]
    }
  ];

  const getCurrentModule = () => {
    return learningModules.find(m => m.id === selectedModule);
  };

  const getCurrentStep = () => {
    const module = getCurrentModule();
    return module?.steps[currentStep];
  };

  const handleStepComplete = () => {
    const step = getCurrentStep();
    if (step) {
      setCompletedSteps(prev => new Set([...prev, step.id]));
      if (currentStep < (getCurrentModule()?.steps.length || 0) - 1) {
        setCurrentStep(currentStep + 1);
      }
    }
  };

  const handleQuizAnswer = (stepId: string, answer: number) => {
    setQuizAnswers(prev => ({ ...prev, [stepId]: answer }));
    setShowExplanation(true);
  };

  const renderStepContent = (step: LessonStep) => {
    switch (step.type) {
      case 'theory':
        return (
          <Box>
            <Typography variant="body1" paragraph>
              {step.content}
            </Typography>
            
            {step.fabioQuote && (
              <Alert severity="info" sx={{ mb: 2 }}>
                <Typography variant="body2" fontStyle="italic">
                  üí¨ <strong>F√°bio diz:</strong> "{step.fabioQuote}"
                </Typography>
              </Alert>
            )}

            {step.scientificBasis && (
              <Accordion>
                <AccordionSummary expandIcon={<ExpandMore />}>
                  <Typography variant="subtitle2">
                    <Science sx={{ mr: 1 }} /> Base Cient√≠fica
                  </Typography>
                </AccordionSummary>
                <AccordionDetails>
                  <Typography variant="body2">{step.scientificBasis}</Typography>
                </AccordionDetails>
              </Accordion>
            )}

            {step.excelFormulas && (
              <Accordion>
                <AccordionSummary expandIcon={<ExpandMore />}>
                  <Typography variant="subtitle2">
                    <Functions sx={{ mr: 1 }} /> F√≥rmulas Excel
                  </Typography>
                </AccordionSummary>
                <AccordionDetails>
                  <List dense>
                    {step.excelFormulas.map((formula, index) => (
                      <ListItem key={index}>
                        <ListItemIcon><Calculate /></ListItemIcon>
                        <ListItemText 
                          primary={formula}
                          primaryTypographyProps={{ fontFamily: 'monospace' }}
                        />
                      </ListItem>
                    ))}
                  </List>
                </AccordionDetails>
              </Accordion>
            )}
          </Box>
        );

      case 'example':
        return (
          <Box>
            <Typography variant="body1" paragraph>
              {step.content}
            </Typography>
            
            {step.practicalExample && (
              <Paper sx={{ p: 2, bgcolor: 'grey.50', mb: 2 }}>
                <Typography variant="subtitle2" gutterBottom>
                  <EmojiObjects sx={{ mr: 1 }} /> Exemplo Pr√°tico:
                </Typography>
                <Typography variant="body2" sx={{ whiteSpace: 'pre-line' }}>
                  {step.practicalExample}
                </Typography>
              </Paper>
            )}

            {step.excelFormulas && (
              <Accordion>
                <AccordionSummary expandIcon={<ExpandMore />}>
                  <Typography variant="subtitle2">
                    <Functions sx={{ mr: 1 }} /> Implementa√ß√£o Excel
                  </Typography>
                </AccordionSummary>
                <AccordionDetails>
                  <List dense>
                    {step.excelFormulas.map((formula, index) => (
                      <ListItem key={index}>
                        <ListItemText 
                          primary={formula}
                          primaryTypographyProps={{ fontFamily: 'monospace', fontSize: '0.9rem' }}
                        />
                      </ListItem>
                    ))}
                  </List>
                </AccordionDetails>
              </Accordion>
            )}
          </Box>
        );

      case 'practice':
        return (
          <Box>
            <Typography variant="body1" paragraph>
              {step.content}
            </Typography>
            
            <Button
              variant="contained"
              onClick={() => setShowPracticeData(true)}
              startIcon={<DataObject />}
              sx={{ mb: 2 }}
            >
              Abrir Dados de Pr√°tica
            </Button>

            {step.interactiveDemo && (
              <Card sx={{ mt: 2 }}>
                <CardContent>
                  <Typography variant="subtitle2" gutterBottom>Dados para Pr√°tica:</Typography>
                  <Grid container spacing={2}>
                    {step.interactiveDemo.datasets?.map((dataset: any, index: number) => (
                      <Grid item xs={12} md={4} key={index}>
                        <Paper sx={{ p: 2 }}>
                          <Typography variant="subtitle2">{dataset.name}</Typography>
                          <Chip size="small" label={dataset.type} color="primary" />
                          <Typography variant="body2" sx={{ mt: 1 }}>
                            Valores: {dataset.values.join(', ')}
                          </Typography>
                        </Paper>
                      </Grid>
                    ))}
                  </Grid>
                </CardContent>
              </Card>
            )}
          </Box>
        );

      case 'quiz':
        return (
          <Box>
            <Typography variant="h6" gutterBottom>
              <Quiz sx={{ mr: 1 }} /> {step.quiz?.question}
            </Typography>
            
            <Grid container spacing={1} sx={{ mb: 2 }}>
              {step.quiz?.options.map((option, index) => (
                <Grid item xs={12} key={index}>
                  <Button
                    variant={quizAnswers[step.id] === index ? "contained" : "outlined"}
                    fullWidth
                    onClick={() => handleQuizAnswer(step.id, index)}
                    sx={{ textAlign: 'left', justifyContent: 'flex-start' }}
                  >
                    {String.fromCharCode(65 + index)}. {option}
                  </Button>
                </Grid>
              ))}
            </Grid>

            {showExplanation && quizAnswers[step.id] !== undefined && (
              <Fade in={showExplanation}>
                <Alert 
                  severity={quizAnswers[step.id] === step.quiz?.correct ? "success" : "error"}
                  icon={quizAnswers[step.id] === step.quiz?.correct ? <CheckCircle /> : <Cancel />}
                >
                  <Typography variant="body2">
                    <strong>
                      {quizAnswers[step.id] === step.quiz?.correct ? "Correto!" : "Incorreto!"}
                    </strong>
                  </Typography>
                  <Typography variant="body2" sx={{ mt: 1 }}>
                    {step.quiz?.explanation}
                  </Typography>
                </Alert>
              </Fade>
            )}
          </Box>
        );

      default:
        return <Typography>Tipo de passo n√£o reconhecido</Typography>;
    }
  };

  const calculateProgress = () => {
    const module = getCurrentModule();
    if (!module) return 0;
    return (completedSteps.size / module.steps.length) * 100;
  };

  useEffect(() => {
    setProgress(calculateProgress());
  }, [completedSteps, selectedModule]);

  return (
    <Box sx={{ maxWidth: 1200, margin: 'auto', p: 3 }}>
      <Typography variant="h4" gutterBottom align="center">
        <School sx={{ mr: 2, fontSize: 40 }} />
        Ensino Cient√≠fico Interativo
      </Typography>
      
      <Typography variant="h6" align="center" color="text.secondary" gutterBottom>
        Aprenda an√°lise de dados com metodologia cient√≠fica completa e insights de especialistas
      </Typography>

      <Card sx={{ mb: 3, background: 'linear-gradient(45deg, #1565c0 30%, #42a5f5 90%)' }}>
        <CardContent>
          <Typography variant="h6" sx={{ color: 'white', mb: 2 }}>
            üéì Sistema de Ensino Revolucion√°rio
          </Typography>
          <Grid container spacing={2}>
            <Grid item xs={12} md={4}>
              <Typography variant="body2" sx={{ color: 'white' }}>
                ‚úÖ Metodologia baseada em casos reais<br/>
                ‚úÖ Cita√ß√µes diretas de especialistas<br/>
                ‚úÖ Base cient√≠fica referenciada<br/>
                ‚úÖ Exemplos pr√°ticos detalhados
              </Typography>
            </Grid>
            <Grid item xs={12} md={4}>
              <Typography variant="body2" sx={{ color: 'white' }}>
                ‚úÖ Quizzes interativos<br/>
                ‚úÖ F√≥rmulas Excel completas<br/>
                ‚úÖ Exerc√≠cios pr√°ticos<br/>
                ‚úÖ Progresso personalizado
              </Typography>
            </Grid>
            <Grid item xs={12} md={4}>
              <Typography variant="body2" sx={{ color: 'white' }}>
                ‚úÖ Insights de F√°bio<br/>
                ‚úÖ Casos reais de pesquisa<br/>
                ‚úÖ Metodologia cient√≠fica<br/>
                ‚úÖ Aplica√ß√£o profissional
              </Typography>
            </Grid>
          </Grid>
        </CardContent>
      </Card>

      <Tabs value={selectedTab} onChange={(e, v) => setSelectedTab(v)} sx={{ mb: 3 }}>
        <Tab label="M√≥dulos" icon={<MenuBook />} />
        <Tab label="Progresso" icon={<Assessment />} />
        <Tab label="Recursos" icon={<Lightbulb />} />
      </Tabs>

      {selectedTab === 0 && (
        <Grid container spacing={3}>
          <Grid item xs={12} md={4}>
            <Typography variant="h6" gutterBottom>M√≥dulos de Aprendizagem</Typography>
            {learningModules.map((module) => (
              <Card 
                key={module.id} 
                sx={{ 
                  mb: 2, 
                  cursor: 'pointer',
                  border: selectedModule === module.id ? 2 : 0,
                  borderColor: selectedModule === module.id ? 'primary.main' : 'transparent'
                }}
                onClick={() => {
                  setSelectedModule(module.id);
                  setCurrentStep(0);
                  setShowExplanation(false);
                }}
              >
                <CardContent>
                  <Box display="flex" justifyContent="space-between" alignItems="flex-start" mb={1}>
                    <Typography variant="h6">{module.title}</Typography>
                    <Chip 
                      size="small" 
                      label={module.difficulty} 
                      color={
                        module.difficulty === 'beginner' ? 'success' :
                        module.difficulty === 'intermediate' ? 'warning' :
                        module.difficulty === 'advanced' ? 'error' : 'secondary'
                      }
                    />
                  </Box>
                  <Typography variant="body2" color="text.secondary" paragraph>
                    {module.description}
                  </Typography>
                  <Box display="flex" alignItems="center" justifyContent="space-between">
                    <Typography variant="caption">
                      ‚è±Ô∏è {module.duration}
                    </Typography>
                    <Badge 
                      badgeContent={`${Math.floor((completedSteps.size / module.steps.length) * 100)}%`} 
                      color="primary"
                    >
                      <Star color={selectedModule === module.id ? 'primary' : 'disabled'} />
                    </Badge>
                  </Box>
                </CardContent>
              </Card>
            ))}
          </Grid>

          <Grid item xs={12} md={8}>
            {selectedModule && getCurrentModule() && (
              <Card>
                <CardContent>
                  <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                    <Typography variant="h5">{getCurrentModule()?.title}</Typography>
                    <Box display="flex" alignItems="center">
                      <IconButton onClick={() => setIsPlaying(!isPlaying)}>
                        {isPlaying ? <Pause /> : <PlayArrow />}
                      </IconButton>
                      <IconButton onClick={() => setCurrentStep(0)}>
                        <Refresh />
                      </IconButton>
                    </Box>
                  </Box>

                  <LinearProgress 
                    variant="determinate" 
                    value={progress} 
                    sx={{ mb: 3, height: 8, borderRadius: 4 }}
                  />

                  <Typography variant="body1" color="text.secondary" paragraph>
                    {getCurrentModule()?.description}
                  </Typography>

                  <Accordion sx={{ mb: 2 }}>
                    <AccordionSummary expandIcon={<ExpandMore />}>
                      <Typography variant="subtitle1">Objetivos de Aprendizagem</Typography>
                    </AccordionSummary>
                    <AccordionDetails>
                      <List dense>
                        {getCurrentModule()?.objectives.map((objective, index) => (
                          <ListItem key={index}>
                            <ListItemIcon><CheckCircle color="primary" /></ListItemIcon>
                            <ListItemText primary={objective} />
                          </ListItem>
                        ))}
                      </List>
                    </AccordionDetails>
                  </Accordion>

                  <Stepper activeStep={currentStep} orientation="vertical">
                    {getCurrentModule()?.steps.map((step, index) => (
                      <Step key={step.id}>
                        <StepLabel>
                          <Box display="flex" alignItems="center">
                            {step.title}
                            {completedSteps.has(step.id) && (
                              <CheckCircle color="success" sx={{ ml: 1, fontSize: 20 }} />
                            )}
                          </Box>
                        </StepLabel>
                        <StepContent>
                          {renderStepContent(step)}
                          <Box sx={{ mt: 2 }}>
                            <Button
                              variant="contained"
                              onClick={handleStepComplete}
                              disabled={completedSteps.has(step.id)}
                              sx={{ mr: 1 }}
                            >
                              {completedSteps.has(step.id) ? 'Completo' : 'Marcar como Completo'}
                            </Button>
                            {index > 0 && (
                              <Button onClick={() => setCurrentStep(index - 1)}>
                                Anterior
                              </Button>
                            )}
                          </Box>
                        </StepContent>
                      </Step>
                    ))}
                  </Stepper>
                </CardContent>
              </Card>
            )}

            {!selectedModule && (
              <Card>
                <CardContent>
                  <Typography variant="h6" gutterBottom align="center">
                    Selecione um m√≥dulo para come√ßar
                  </Typography>
                  <Typography variant="body1" align="center" color="text.secondary">
                    Escolha um dos m√≥dulos ao lado para iniciar sua jornada de aprendizado cient√≠fico.
                  </Typography>
                </CardContent>
              </Card>
            )}
          </Grid>
        </Grid>
      )}

      {selectedTab === 1 && (
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>Seu Progresso de Aprendizagem</Typography>
            
            <Grid container spacing={3}>
              {learningModules.map((module) => {
                const moduleProgress = (completedSteps.size / module.steps.length) * 100;
                return (
                  <Grid item xs={12} md={6} key={module.id}>
                    <Card>
                      <CardContent>
                        <Typography variant="subtitle1" gutterBottom>{module.title}</Typography>
                        <LinearProgress 
                          variant="determinate" 
                          value={moduleProgress} 
                          sx={{ mb: 1 }}
                        />
                        <Typography variant="body2" color="text.secondary">
                          {Math.floor(moduleProgress)}% completo
                        </Typography>
                      </CardContent>
                    </Card>
                  </Grid>
                );
              })}
            </Grid>

            <Alert severity="info" sx={{ mt: 3 }}>
              <Typography variant="body2">
                üí° <strong>Dica:</strong> Complete todos os m√≥dulos para obter certifica√ß√£o em 
                An√°lise Cient√≠fica de Dados com metodologia avan√ßada!
              </Typography>
            </Alert>
          </CardContent>
        </Card>
      )}

      {selectedTab === 2 && (
        <Grid container spacing={3}>
          <Grid item xs={12} md={6}>
            <Card>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  <Lightbulb /> Insights de F√°bio
                </Typography>
                {getCurrentModule()?.fabioInsights.map((insight, index) => (
                  <Alert key={index} severity="info" sx={{ mb: 1 }}>
                    <Typography variant="body2">üí¨ {insight}</Typography>
                  </Alert>
                ))}
              </CardContent>
            </Card>
          </Grid>
          
          <Grid item xs={12} md={6}>
            <Card>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  <MenuBook /> Refer√™ncias Cient√≠ficas
                </Typography>
                <List dense>
                  {getCurrentModule()?.scientificReferences.map((ref, index) => (
                    <ListItem key={index}>
                      <ListItemIcon><Science /></ListItemIcon>
                      <ListItemText 
                        primary={ref}
                        primaryTypographyProps={{ fontSize: '0.9rem' }}
                      />
                    </ListItem>
                  ))}
                </List>
              </CardContent>
            </Card>
          </Grid>

          <Grid item xs={12}>
            <Card>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  <Timeline /> Casos Pr√°ticos Reais
                </Typography>
                <Grid container spacing={2}>
                  {getCurrentModule()?.practicalCases.map((case_study, index) => (
                    <Grid item xs={12} md={4} key={index}>
                      <Paper sx={{ p: 2, height: '100%' }}>
                        <Typography variant="body2">{case_study}</Typography>
                      </Paper>
                    </Grid>
                  ))}
                </Grid>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      )}

      <Dialog open={showPracticeData} onClose={() => setShowPracticeData(false)} maxWidth="md" fullWidth>
        <DialogTitle>Dados de Pr√°tica Interativa</DialogTitle>
        <DialogContent>
          <Typography variant="body1" gutterBottom>
            Use estes dados para praticar as t√©cnicas aprendidas:
          </Typography>
          {/* Conte√∫do do di√°logo seria implementado aqui */}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setShowPracticeData(false)}>Fechar</Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default EnsinerCientificoInterativo;
